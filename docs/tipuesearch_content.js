var tipuesearch = {"pages":[{"title":"Projects","text":"Mini project 1 Mini project 2 Final project Mini project 1 Mini project 2 Final project","tags":"pages","url":"pages/projects.html"},{"title":"Resources","text":"Books No book is required. But we highly recommend two books for this course. Fluent Python: Clear, Concise, and Effective Programming, by Luciano Ramalho. Publisher: O'Reilly Media. 2015. Designing Data Intensive Applications, by http://dataintensive.net/ , The Big Ideas Behind Reliable, Scalable, and Maintainable Systems by Martin Kleppmann. Publisher: O'Reilly Media 2014 Other useful books The Practice of Programming by Brian W. Kernighan and Rob Pike, Addison-Wesley, 1999. Skiena: The Algorithm Design Manual Abelson, Sussmann and Sussmann: SICP and python based online version based on it: http://composingprograms.com/ High Performance Python: By Micha Gorelick, Ian Ozsvald. Oreilly Media 2014. Papers and other readings Python pep8 An opinionated guide to python style Git Recommended: Git from the bottom up Recommended: Git Book GitHub Videos and Training GitHub Interactive Tutorial Git - the simple guide Git Reference Git Cheat Sheet Git Immersion Tutorial Git Atlassian Tutorial Python python Rich overview of Python 3 language features (recommended to work through) Scientific visualization with Python and Matplotlib Vim Spend 30 minutes to complete the vimtutor . After you have installed vim , execute the following command in your command line: vimtutor Vim Cheat Sheet Vimcasts Recommended book Bash Command Line Reference Cheat Sheet Bash scripting Cheat Sheet Unix-Related Basic Computing Tools Windows Users Using Linux Subsystem on Windows 10 PuTTY SSH client for Windows","tags":"Resources","url":"pages/resources.html"},{"title":"Schedule","text":"ï»¿","tags":"pages","url":"pages/schedule.html"},{"title":"Tutorials","text":"How to Setup your Private Class Repository Steps to Setup Your Private Class Repository Add an SSH Key to Your Account How to Setup your Private Class Repository All of your work in AM215 will be committed in your private class git repository hosted in the AM215 organization at https://code.harvard.edu/AM215 . This tutorial walks you through the steps to create your private class repository. If you have already created git repositories on GitHub, then there is nothing new to learn in this tutorial and you should be familiar with the process already. A note on https://code.harvard.edu/ : this is an instance of a GitHub Enterprise edition hosted by Harvard University. The user interface is identical to the public GitHub site. The main difference is that https://code.harvard.edu/ is owned by Harvard University , whereas GitHub belongs to Microsoft which gives rise to security concerns regarding data belonging to classes held at Harvard University. Steps to Setup Your Private Class Repository Obtain your Harvard NetID Each day, in the afternoon, the members of the organization will be updated. If the daily update happened and you cannot access the organization, please fill this form . You must use our *.harvard.edu email. Once added to the organization, navigate to https://code.harvard.edu/AM215 (login if necessary) and click the green \"New\" button to add a new repository. Your repository must be named after your NetID . You can add an optional description if you like. Make sure the private radio button is checked and click \"Create repository\". You do not need to check any other options. This is all you have to do for now. In the first homework we will focus on how to setup your new repository such that you can work with it from your laptop (you can skip the landing page after you have created the repository). When you navigate back to https://code.harvard.edu/AM215 you should see something similar to this: The blurred repository is your private class repository that was the focus of this tutorial. The main_2024 repository is the main AM215 class repository which is used to distribute all of the class material during the semester. In the first homework we will set this repository as an upstream such that you can conveniently unpack class material into your private repository. Note: private repositories are only visible to you within the organization. Please do not create other repositories in the https://code.harvard.edu/AM215 organization. You have your own user account on https://code.harvard.edu/ just like you have on GitHub or other providers. Your user account requires your Harvard login credentials and is a good alternative to hosts like GitHub. Feel free to create as many repositories in your user account as you like. Add an SSH Key to Your Account In order to access content on https://code.harvard.edu using Git you need to setup an SSH key. Check if you already have the file ~/.ssh/id_rsa.pub (assuming RSA). If you do not have such a file you can create one with ssh-keygen -t rsa -b 4096 Choose the default location by just hitting enter. You may enter a password for the key or just hit enter to go without password. If go with password you will have to enter it every time you use the key. To upload the public key to your Harvard GitHub account , click on your icon in the top right corner on your https://code.harvard.edu page, then click on \"Settings\" and then \"SSH and GPG keys\" in the left panel. Alternatively use this link https://code.harvard.edu/settings/keys . Click on the green \"New SSH key\" button in the top right corner and give your new key a title (e.g. the name of your laptop). In the key field paste the contents of your public key found in ~/.ssh/id_rsa.pub . Use for example cat ~/.ssh/id_rsa.pub and copy paste the output into the \"Key\" field on your GitHub page. You are now able to access any repositories on https://code.harvard.edu with corresponding permissions. Never share your private key ~/.ssh/id_rsa with anybody. Note: do not create a key in the class Docker container since the key will be lost when you exit the container. For security reasons, sensitive keys like this should not be put in containers. Pair-programming Workflow Exercises performed during pair-programming sections should be put under version control similar to homework assignments (see the Homework Workflow section above). You must not branch off and create a pull-request for pair-programming exercises . Just add and commit your work on the main or master branch and push them to your repository ( make sure you are on the correct branch before you commit! ). The following are the basic rules we apply for pair-programming submissions: Your private repository should contain a directory named lab with sub-directories for each session. The sub-directories should be named ppX where X is the session number. Within the sub-directory ppX , place the exercise files that you completed during the pair-programming sections. The exercises must have the name exercise_Y.ext where Y corresponds to the exercise number and ext is the proper extension ( .py , .sh , .c , .cpp ) depending on the exercise. Here is an example how it may look like: The pair-programming exercises will be graded for completeness and help us ensure you are on the right track. You may lose points for the completeness part if you do not follow these two basic rules. Protocol In class we are focusing on command line tools for the development of software projects in computational science. It is important that you get familiar with a small selection of such tools and integrate them in your development process. The pair-programming sections aim at combining some of these tools together to provide you with hands-on experience while developing software. The key is the \"pair\" in pair-programming. The exchange of knowledge between team mates in these pair-programming sections is essential for learning said tools or learning something new you did not know before. The pair-programming works by using a tool called tmate which is based on the tmux terminal multiplexer . It allows for easy sharing of a command line session or a specific instance of a program in read/write and read-only modes via ssh or web browsers. Check out this blog post for more. Text file editing will be performed in any text editor that supports a text-based user interface (TUI). Recommended choices are vim or emacs . If you are mainly working on a Windows operating system, you should install the Windows Subsystem for Linux . A small guide for doing so can be found here . See the How to Launch tmate section below for the steps to launch tmate on your laptop. Note: tmate is perfect for any coding related communication. For example, debugging, work on the project and of course pair-programming. There is no audio channel integrated in tmate . If students are remote, a zoom session or similar must be established for oral communication. The exercises in the pair-programming sections are necessarily collaborative. Each member of the group will turn in the same script. Adhere to the following workflow when solving pair-programming exercises: For each exercise (or sub-exercise for big problems), there will be one sharer , one coder , and one listener . This assumes a group size of 3 . If the group only has two people, then either one of you can take the sharer's role. The sharer will start each coding session and document interactions including points of contention and challenges. The coder will be in charge of writing the code. The listener will make suggestions and may offer tweaks from time to time. The sharer starts a new tmate session and invites the other team mates to join the session. Ideally you want to start the session inside the directory of the current pair-programming exercise in your git repository. You may share a read/write link either through ssh or a web browser. Note: the sharer allows the others access to her/his computer. Any abusive behavior that may cause harm on the sharer's system will not be tolerated and are forwarded to the dean's office. After the team mates have accepted the invite, they will be able to share the terminal instance and can create new files or execute Python together. The team should discuss a strategy on how to approach the exercise. The coder should start writing some code with input from the other two team members. Before each section that you work on, place a comment indicating which team member worked on that section. For example, a bash script could look like this: #!/usr/bin/env bash # File : exercise_1.sh # Created : Sat Aug 07 2021 04:58:49 PM (-0400) # Coder : Alice # Listener : Bob # Sharer : Alice echo 'Hello World' ### Main point of contention: whether to capitalize \"W\" in \"world\" For small exercises, each team member can play a single role once. For large exercises, the team members may rotate roles. The exercise will make it clear when you should rotate. At the end of the exercise, the developed code is inside the sharer's git repository that can readily be committed. Links to download these files can be shared with the other team mates such that they can update their repositories as well. Note that the exercise code will contain comments pertaining to who worked on which section. How to launch tmate Disclaimer: tmate is a tool to share a terminal session and interact with other people. If you host a session, it means the instance runs on your local computer and you are in control of how much permissions you want assign to your mates. There are 2 ways to share a session: read-only: mates that connect to your session can only read data (this is safe provided the data you expose is safe). read-write: mates that connect to your session can read and write data. This is unsafe if you share a session with an mistrusted person. Recommended Workflow Launch the CS107/AC207 docker container with the working directory mounted (see the provided run_cs107_docker.sh launch script ) Start tmate inside the docker container Wrapping tmate in a docker container provides another layer of security. You can also install tmate using your distribution package manager (on Linux or homebrew on MacOSX) and skip step 1 if you wish not to use a container. Steps: Assume Docker is installed and we have pulled the CS107/AC207 docker image . You can install the run_cs107_docker.sh launch script in your PATH for convenience (e.g. ~/bin/run_cs107_docker.sh and add this directory to your PATH environment variable). Be sure that the run_cs107_docker.sh script is executable . See the chmod command to change the permissions of the script. Assume you want to work on the PP1 exercise and you are in the lab directory of your private Git repo and pp1 exists. Launch the docker container and mount the pp1 directory in your repository: $ run_cs107_docker.sh pp1/ root@0a076feb425f:~# You are now inside a running docker container. Note that the hostname 0a076feb425f is arbitrary and yours will differ. Launch tmate (it is already installed in the container): root@0a076feb425f:~# tmate Tip: if you wish to use tmate only for remote access, run: tmate -F To see the following messages again, run in a tmate session: tmate show-messages Press <q> or <ctrl-c> to continue --------------------------------------------------------------------- Connecting to ssh.tmate.io... Note: clear your terminal before sharing readonly access web session read only: https://tmate.io/t/ro-qNRV5QRVWkW3qr55sfATkBegr ssh session read only: ssh ro-qNRV5QRVWkW3qr55sfATkBegr@nyc1.tmate.io web session: https://tmate.io/t/nMWurZc7Q6Zbv8EnX2wdhf6GB ssh session: ssh nMWurZc7Q6Zbv8EnX2wdhf6GB@nyc1.tmate.io The tmate instance is now running and you can choose between 4 possible links to share with your mates: 2 that can be run in your web browser and another 2 to be used with ssh in your terminal (either read-only and read/write). Choose the appropriate link you want to share with your pair-programming mates. If you press q or ctrl-c you are dropped back to the shell. The server will tell you whenever mates join. You can print the links again with tmate show-messages (be careful when you are sharing screens on zoom for example). Note that pressing ctrl-d or typing exit in the shell will close the active terminal and if only one is left, also the active tmate session. This will close the connections to all connected clients. You can now work together on the exercise. For example: root@0a076feb425f:~# vim exercise_1.py The image below shows a terminal session (left) and two mates connected in a web browser window (right): Note: We run tmate with root in the docker container. Do not run tmate as root in any other situation (even here we could create a regular user) and be careful with password-less sudo (avoid password-less sudo in the first place). In order to use ssh you need to setup an ssh key if you have not done so already. If you do not have such a key, you may create one by running ssh-keygen -t rsa -b 4096 If you are not dropped into a shell after you execute tmate it may be because you are using a shell different than zsh . Install zsh on your system using your package manager and run tmate like this SHELL = /bin/zsh tmate 1}}} -->","tags":"pages","url":"pages/tutorials.html"},{"title":"Mathematical Modeling for Computational Science","text":"Mathematical modeling is the very heart of applied mathematics. Presented with a new problem, we need to figure out how to formulate it in mathematical terms; how to decide if the formulation is correct; and how to use the formulation to do something useful. Applied Mathematics has been described as a \"no holds barred\" competition to solve problems and get to the truth. Recent events from the rise of chatbots to the management of the Covid pandemic have mathematical modeling at their core: In the case of chatbots, we finally have arrived at a model of language that is sufficiently robust that we can reliably generate it â this is fundamentally an advance of modeling, though its instantiation was enabled by incredible technology; in the case of covid, mathematical models presaged the intensity of the pandemic and helped to manage it â yet in many ways they also failed in making accurate enough predictions to be useful. Mathematical modeling is hard. It requires that we creatively invent equations, and that the equations can be solvable and useful. Doing it well is an art form. Evaluating models â testing how well they work â is extremely important. Arguably the major advances that have occurred in mathematical modeling over the last decade are advances in systematic evaluation and iterative improvement of models. The goal of this class is to make you into a mathematical modeler, using everything that you have learned to create models of things that are of interest to you. The mathematics that can be applied is vast, and so as part of becoming a modeler, you need to learn to be comfortable quickly assessing mathematics that you do not yet know â and then figuring out what you need for the problem at hand. At the same time, sophisticated modeling in 2024 requires software engineering -- at a level that is beyond the AM undergraduate curriculum. To address this, we are now introducing a hybrid undergraduate and graduate class (Applied Math 115/215) where the undergrad component will focus on the essentials of mathematical modeling, and the graduate class will also build upon this to learn how to implement these models using modern software engineering skills (which we will teach in additional lecture each week to the graduate students). Our hope is that this hybrid class will end up as a community where people with different skills can work together and make amazing models of interesting things. To get us to this point, the class will survey examples of areas where mathematical models are important: we will simultaneously focus on interesting questions (what is the probability that the best team wins the world series? Should a fast food restaurant offer a discount to their customers? How many people can the earth support?), while at the same time learning mathematical ideas that are generally useful. Fundamentally, this course approaches a number of problems without the prejudice of trying to apply a particular method of solution. The examples we will study, along with associated questions we might address,include: Sports Analytics : When do we expect a person to break the 2 hour mark in a marathon? What is the optimal pace to take at different parts of a race? Given the draw of a tournament (tennis, march madness, etc), and everything you know about the teams and players, please predict who will win. Assign probabilities. Evaluate potential solutions in a mathematically same way. Random Walks, Diffusion and Markov processes : Models of stock and option pricing. Random walks on graphs: Page rank and web search. Diffusion in the atmosphere: Pollution forecasting, and attributing carbon emission. Predicting elections : Can we predict in advance the outcome of an election given the properties of the voters? Can we devise advertising strategies to affect the outcome? Queuing problems : Design the algorithm for elevators in a large building with many people. Design the algorithms for traffic lights. Design Amazon's logistics chains. Should a fast food restaurant offer discounts to attract customers? Create a Hedge Fund : Given the data for stock or other asset prices over time, create a mathematical model that powers a notional hedge fund. Evaluate this model against performance of similar funds in the past and assess how well are you doing.d Simple models of climate : Why is the climate of the earth what it is? Can we estimate in simple terms when and if and how it will change? What do actual climate models do? Prediction Markets : Choose a question in a prediction market (e.g. https://www.predictit.org/ ). Formulate a mathematical model to answer the question. Enter. Assess in advance how well you think you will do. The class syllabus can be found by following this link. Teaching Staff Instructors Michael Brenner ( brenner@seas.harvard.edu ) Office: Office Hours: Ignacio Becker Troncoso ( iebecker@g.harvard.edu ) Office: SEC 1.312-05 Office Hours: Teaching Fellows Fellow Email Sarah Martinson sarahmartinson@g.harvard.edu Katya Ivshina eivshina@g.harvard.edu Livia Guttieres liviaguttieres@g.harvard.edu Elle Weeks elleweeks@g.harvard.edu Course Calendar Lecture Hours All lectures are of 75 minutes duration. Time is given in Eastern Standard Time (Boston). Friday lecture is aimed to AM215 students. Everyone is free to attend. Lecture attendance is expected : Time Room Tuesday 10:30 AM - 11:45 AM Emerson 210 Thursday 10:30 AM - 11:45 AM Emerson 210 Friday 10:30 AM - 11:45 PM Science Center Hall E Important Information Canvas : Is used for posting grades and other class sensitive content. Gradescope : Is used for homework and lab submissions. Class Git repository : The handouts and other material are provided through the main repository hosted in the AM215 organization. You can clone this repository once you have joined the AM215 organization. git clone git @ code . harvard . edu : AM215 / main_2024 . git Membership to the AM215 organization be updated daily once the semester starts. If for some reason you are not given access, please wait until the afternoon. If you cannot access the organization, please fill this form . You must use our *.harvard.edu email and include your NetID , which is also your https://code.harvard.edu username (something similar to abc123 ). Class Discussion We will use the Ed Discussion forum on our Canvas page as our main communication platform. Questions regarding homework, sections or lecture material must be posted on this forum and you are encouraged to reply to questions if you know the answer or you can share a useful contribution.","tags":"pages","url":"pages/mathematical-modeling-for-computational-science/"},{"title":"Lecture 0","text":"Lecture 0","tags":"Lectures","url":"lectures/lecture0/"}]}