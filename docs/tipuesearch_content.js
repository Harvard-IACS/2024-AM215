var tipuesearch = {"pages":[{"title":"Projects","text":"Mini project 1 Mini project 2 Final project Mini project 1 Mini project 2 Final project","tags":"pages","url":"pages/projects.html"},{"title":"Resources","text":"Books No book is required. But we highly recommend two books for this course. Fluent Python: Clear, Concise, and Effective Programming, by Luciano Ramalho. Publisher: O'Reilly Media. 2015. Designing Data Intensive Applications, by http://dataintensive.net/ , The Big Ideas Behind Reliable, Scalable, and Maintainable Systems by Martin Kleppmann. Publisher: O'Reilly Media 2014 Other useful books The Practice of Programming by Brian W. Kernighan and Rob Pike, Addison-Wesley, 1999. Skiena: The Algorithm Design Manual Abelson, Sussmann and Sussmann: SICP and python based online version based on it: http://composingprograms.com/ High Performance Python: By Micha Gorelick, Ian Ozsvald. Oreilly Media 2014. Papers and other readings Python pep8 An opinionated guide to python style Git Recommended: Git from the bottom up Recommended: Git Book GitHub Videos and Training GitHub Interactive Tutorial Git - the simple guide Git Reference Git Cheat Sheet Git Immersion Tutorial Git Atlassian Tutorial Python python Rich overview of Python 3 language features (recommended to work through) Scientific visualization with Python and Matplotlib Vim Spend 30 minutes to complete the vimtutor . After you have installed vim , execute the following command in your command line: vimtutor Vim Cheat Sheet Vimcasts Recommended book Bash Command Line Reference Cheat Sheet Bash scripting Cheat Sheet Unix-Related Basic Computing Tools Windows Users Using Linux Subsystem on Windows 10 PuTTY SSH client for Windows","tags":"Resources","url":"pages/resources.html"},{"title":"Schedule","text":"ï»¿","tags":"pages","url":"pages/schedule.html"},{"title":"Tutorials","text":"How to Setup your Private Class Repository Steps to Setup Your Private Class Repository Add an SSH Key to Your Account Homework Workflow Example Homework Workflow Step 1: Branch Off Step 2: Solving the Homework Step 3: Create a Pull Request Creating a Web Pull Request Step 4: Submit on Gradescope How to Setup your Private Class Repository All of your work in AM215 will be committed in your private class git repository hosted in the AM215 organization at https://code.harvard.edu/AM215 . This tutorial walks you through the steps to create your private class repository. If you have already created git repositories on GitHub, then there is nothing new to learn in this tutorial and you should be familiar with the process already. A note on https://code.harvard.edu/ : this is an instance of a GitHub Enterprise edition hosted by Harvard University. The user interface is identical to the public GitHub site. The main difference is that https://code.harvard.edu/ is owned by Harvard University , whereas GitHub belongs to Microsoft which gives rise to security concerns regarding data belonging to classes held at Harvard University. Steps to Setup Your Private Class Repository Obtain your Harvard NetID Each day, in the afternoon, the members of the organization will be updated. If the daily update happened and you cannot access the organization, please fill this form . You must use our *.harvard.edu email. Once added to the organization, navigate to https://code.harvard.edu/AM215 (login if necessary) and click the green \"New\" button to add a new repository. Your repository must be named after your NetID . You can add an optional description if you like. Make sure the private radio button is checked and click \"Create repository\". You do not need to check any other options. This is all you have to do for now. In the first homework we will focus on how to setup your new repository such that you can work with it from your laptop (you can skip the landing page after you have created the repository). When you navigate back to https://code.harvard.edu/AM215 you should see something similar to this: The main_2024 repository is the main AM215 class repository which is used to distribute all of the class material during the semester. In the first homework we will set this repository as an upstream such that you can conveniently unpack class material into your private repository. Note: private repositories are only visible to you within the organization. Please do not create other repositories in the https://code.harvard.edu/AM215 organization. You have your own user account on https://code.harvard.edu/ just like you have on GitHub or other providers. Your user account requires your Harvard login credentials and is a good alternative to hosts like GitHub. Feel free to create as many repositories in your user account as you like. Add an SSH Key to Your Account In order to access content on https://code.harvard.edu using Git you need to setup an SSH key. Check if you already have the file ~/.ssh/id_rsa.pub (assuming RSA). If you do not have such a file you can create one with ssh-keygen -t rsa -b 4096 Choose the default location by just hitting enter. You may enter a password for the key or just hit enter to go without password. If go with password you will have to enter it every time you use the key. To upload the public key to your Harvard GitHub account , click on your icon in the top right corner on your https://code.harvard.edu page, then click on \"Settings\" and then \"SSH and GPG keys\" in the left panel. Alternatively use this link https://code.harvard.edu/settings/keys . Click on the green \"New SSH key\" button in the top right corner and give your new key a title (e.g. the name of your laptop). In the key field paste the contents of your public key found in ~/.ssh/id_rsa.pub . Use for example cat ~/.ssh/id_rsa.pub and copy paste the output into the \"Key\" field on your GitHub page. You are now able to access any repositories on https://code.harvard.edu with corresponding permissions. Never share your private key ~/.ssh/id_rsa with anybody. Homework Workflow The following are the basic rules we apply for homework submissions: Naming convention for homework directories: your private repository should contain one homework directory on the repository root with hwX sub-directories for each homework assignment. The X in hwX is to be replaced with the assignment number. For example hw1 , hw2 and so on. Which files will be considered for grading: within the sub-directory hwX , place the assignment files that you want us to grade in a directory called submission . We will only grade data in these directories . Pull request (PR): your homework assignments must be completed on git branches called hwX , where X is again to be substituted with the assignment number. Your homework X submission requires an open pull request to merge the hwX branch into your main branch for full points (both branches are inside your private class repository in the AM215 organization ). Some implications of this: Solving homework on the main or master branch is always wrong. For each homework submission you need to issue one open PR. Merging an open PR before the teaching staff has reviewed and graded your work will make the PR disappear . Only files inside submission in PR X will contribute to your hwX grade (see next item). Gradescope: your homework will be graded on the Gradescope platform that has been setup and linked to the class canvas page. The platform does currently not support submission directly via your Git repository. You therefore have to create a zip archive of your submission directory created in step 2 above and upload the archive on Gradescope . It is important that you zip-up the directory and not individual files inside. You can use the command zip -r submission.zip submission/ , where the -r option means add files recursively , submission.zip is the name of zip archive and submission is your homework submission directory from step 2 containing your solution. This assumes you are in homework/hwX inside your Git repository. Points will be lost if any of these requirements are violated . The teaching staff will review the open PR for each homework and grade your work accordingly. Grades will be released on Canvas and feedback is provided through the Gradescope platform. Once you have received the grade and feedback, your open PR for homework X can be merged into your main branch if there are no more pending issues. After the PR is closed, you may delete the hwX branch in your repository. This concludes a homework submission. Example Homework Workflow This example is intended to help you internalize the three basic rules described above. Note: Specific instructions provided in each homework assignment may override the following basic approach. Suppose we want to work on homework assignment 3, which consists of 4 problems. Step 1: Branch Off The ease of branching is the main strength of git . Branches allow you to be destructive without affecting production code or data. The reason we solve homeworks on individual branches is to help you develop a feel for this protection and to materialize the required steps to create branches. Branches will provide you true comfort when working on real projects outside of this class. Make sure your main branch is in the state you want your new branch to be based on. If you need to synchronize with your default remote branch you can type git pull The next step consists of creating and switching to a new branch that is based off the current branch. For this you can use git checkout -b hw3 which is how you did it before git 2.23.0 . Since the checkout command is ambiguous , the preferred way for more recent versions of git is git switch -c hw3 You are now on a new branch called hw3 as required. You will need to issue a pull request into main from this branch such that your homework will be graded. You can create the PR now (see below) or once you are done with solving hw3 , it does not matter to git . (Pull requests are not something designed by git itself, but rather by platforms like GitHub or GitLab.) Note: you will lose 5 points if you are not solving your hwX (in this example it is hw3 ) on a branch named hwX . You are of course free to create additional branches besides hwX if suitable. Step 2: Solving the Homework The files the teaching staff will consider for grading have to be located in the directory homework/hw3/submission . You are free to put other files below homework/hw3 that might be useful when you revisit your work sometime later. The problem sheet might be one of those files. Class handouts are distributed in the main class repository . You can manually create these directories and copy the files you want into your hw3 directory using, for example: mkdir -p homework/hw3/submission cp <path to main class repo>/homework/hw3/hw3.pdf homework/hw3 Alternatively you can use git by configuring the main class repository as another remote in your local git repository (see homework 1). In this case you can checkout all the distributed homework files at once with git checkout class/master -- homework/hw3 assuming that the remote points to https://code.harvard.edu/AM215/main_2024 and is locally named \" class \". You may need to update your refs with git fetch --all before you invoke the checkout command above. The homework sheet will state what files have to be submitted. For this hw3 we assume they are P1.py , P2.py , P3.py and P4.py , one for each of the four problems. These files should run and return the required output. They have to be submitted inside the homework/hw3/submission directory. You should commit your work often in logical chunks. Your commits are to be done on the hw3 branch, of course. The following are a few commands that might be helpful: Use git status often to check your local state. Use the git add <file_name> command to stage files you have changed for a commit. Use git commit -m <commit message> to create a commit with an appropriate commit message. Use git stash to temporarily stash modified files (similar to a commit but it is not written to the history). Later on use git stash list to list all your stashed changes if you have used git stash multiple times. You can check what will change when you apply the stash with git stash show -p and apply the stashed changes with git stash apply (or git stash pop which also removes the stash from the list). Note that these commands work on the first stash object in the list stash@{0} if you do not explicitly specify the stash object you want to apply. Use git push to push local branch/commits to your remote repository. Use git restore <file_path> to undo changes to a single file. Use git revert <commit_SHA> to undo the changes in a specific commit. Make sure you have committed your solution you want to submit inside the homework/hw3/submission directory with the required file names. Step 3: Create a Pull Request If you have local commits not pushed to the remote issue the git push command. You are now ready to issue a pull request (you could also have done this step at the very beginning of solving this homework, this is up to you). The goal is to merge the hw3 branch into your main branch eventually. The teaching staff must review and grade your work first, however. There are two ways to accomplish a PR on GitHub: Through the web browser at https://code.harvard.edu/AM215/<your NetID> . Through the GitHub command line client . This method is helpful if you get distracted from the context switch that is associated with the first method. Disclaimer: you would not typically issue a PR for projects you are the sole contributor. Pull requests are typical for large projects at a company in which someone else will review your code before you can merge your code to the production branch. We want you to become accustomed to this type of workflow. It is a good idea to always use separate development branches. You should never commit straight to your main or master branches until the changes have thoroughly been tested. Creating a Web Pull Request Navigate to your https://code.harvard.edu/AM215/<your NetID> private class repository and click on the \"Pull Requests\" tab in the top left part of the window. Click on the \"New pull request\" button Choose your main or master branch as the base (the one you want to merge into) and your hw3 branch as the one you want to compare to. This should automatically reload the page and show the changes that will be applied. Click on the \"Create pull request\" button. You can optionally add comments to this pull request if you desire. Click on the \"Create pull request\" button once more to create and open the pull request. The pull request is now open. You can even push more commits to the hw3 branch if you need to correct something (before the deadline has passed of course). Therefore, you could also create the PR at the beginning of the homework. Note: DO NOT click on the button that says \"Merge pull request\" until you have received your grade and feedback for that homework. You will lose 3 points if you prematurely merge your PR. Step 4: Submit on Gradescope Your submission is now ready to be submitted for grading on Gradescope . Simply create a zip archive of your submission directory you have created in your Git repository, e.g. submission.zip , and upload it to Gradescope by following the link above. You can use the command zip -r submission.zip submission/ , where the -r option means add files recursively , submission.zip is the name of zip archive and submission is your homework submission directory. Since you track the change history of your work in Git, you should not add *.zip files to your Git history. You can simply ignore such archives by adding the line *.zip to your .gitignore file in your repository root.","tags":"pages","url":"pages/tutorials.html"},{"title":"Mathematical Modeling for Computational Science","text":"Mathematical modeling is the very heart of applied mathematics. Presented with a new problem, we need to figure out how to formulate it in mathematical terms; how to decide if the formulation is correct; and how to use the formulation to do something useful. Applied Mathematics has been described as a \"no holds barred\" competition to solve problems and get to the truth. Recent events from the rise of chatbots to the management of the Covid pandemic have mathematical modeling at their core: In the case of chatbots, we finally have arrived at a model of language that is sufficiently robust that we can reliably generate it â this is fundamentally an advance of modeling, though its instantiation was enabled by incredible technology; in the case of covid, mathematical models presaged the intensity of the pandemic and helped to manage it â yet in many ways they also failed in making accurate enough predictions to be useful. Mathematical modeling is hard. It requires that we creatively invent equations, and that the equations can be solvable and useful. Doing it well is an art form. Evaluating models â testing how well they work â is extremely important. Arguably the major advances that have occurred in mathematical modeling over the last decade are advances in systematic evaluation and iterative improvement of models. The goal of this class is to make you into a mathematical modeler, using everything that you have learned to create models of things that are of interest to you. The mathematics that can be applied is vast, and so as part of becoming a modeler, you need to learn to be comfortable quickly assessing mathematics that you do not yet know â and then figuring out what you need for the problem at hand. At the same time, sophisticated modeling in 2024 requires software engineering -- at a level that is beyond the AM undergraduate curriculum. To address this, we are now introducing a hybrid undergraduate and graduate class (Applied Math 115/215) where the undergrad component will focus on the essentials of mathematical modeling, and the graduate class will also build upon this to learn how to implement these models using modern software engineering skills (which we will teach in additional lecture each week to the graduate students). Our hope is that this hybrid class will end up as a community where people with different skills can work together and make amazing models of interesting things. To get us to this point, the class will survey examples of areas where mathematical models are important: we will simultaneously focus on interesting questions (what is the probability that the best team wins the world series? Should a fast food restaurant offer a discount to their customers? How many people can the earth support?), while at the same time learning mathematical ideas that are generally useful. Fundamentally, this course approaches a number of problems without the prejudice of trying to apply a particular method of solution. The examples we will study, along with associated questions we might address,include: Sports Analytics : When do we expect a person to break the 2 hour mark in a marathon? What is the optimal pace to take at different parts of a race? Given the draw of a tournament (tennis, march madness, etc), and everything you know about the teams and players, please predict who will win. Assign probabilities. Evaluate potential solutions in a mathematically same way. Random Walks, Diffusion and Markov processes : Models of stock and option pricing. Random walks on graphs: Page rank and web search. Diffusion in the atmosphere: Pollution forecasting, and attributing carbon emission. Predicting elections : Can we predict in advance the outcome of an election given the properties of the voters? Can we devise advertising strategies to affect the outcome? Queuing problems : Design the algorithm for elevators in a large building with many people. Design the algorithms for traffic lights. Design Amazon's logistics chains. Should a fast food restaurant offer discounts to attract customers? Create a Hedge Fund : Given the data for stock or other asset prices over time, create a mathematical model that powers a notional hedge fund. Evaluate this model against performance of similar funds in the past and assess how well are you doing.d Simple models of climate : Why is the climate of the earth what it is? Can we estimate in simple terms when and if and how it will change? What do actual climate models do? Prediction Markets : Choose a question in a prediction market (e.g. https://www.predictit.org/ ). Formulate a mathematical model to answer the question. Enter. Assess in advance how well you think you will do. The class syllabus can be found by following this link. Teaching Staff Instructors Michael Brenner ( brenner@seas.harvard.edu ) Office: Office Hours: Ignacio Becker Troncoso ( iebecker@g.harvard.edu ) Office: SEC 1.312-05 Office Hours: Teaching Fellows Fellow Email Sarah Martinson sarahmartinson@g.harvard.edu Katya Ivshina eivshina@g.harvard.edu Livia Guttieres liviaguttieres@g.harvard.edu Elle Weeks elleweeks@g.harvard.edu Course Calendar Lecture Hours All lectures are of 75 minutes duration. Time is given in Eastern Standard Time (Boston). Friday lecture is aimed to AM215 students. Everyone is free to attend. Lecture attendance is expected : Time Room Tuesday 10:30 AM - 11:45 AM Emerson 210 Thursday 10:30 AM - 11:45 AM Emerson 210 Friday 10:30 AM - 11:45 PM Science Center Hall E Important Information Canvas : Is used for posting grades and other class sensitive content. Gradescope : Is used for homework and lab submissions. Class Git repository : The handouts and other material are provided through the main repository hosted in the AM215 organization. You can clone this repository once you have joined the AM215 organization. git clone git @ code . harvard . edu : AM215 / main_2024 . git Membership to the AM215 organization be updated daily once the semester starts. If for some reason you are not given access, please wait until the afternoon. If you cannot access the organization, please fill this form . You must use our *.harvard.edu email and include your NetID , which is also your https://code.harvard.edu username (something similar to abc123 ). Class Discussion We will use the Ed Discussion forum on our Canvas page as our main communication platform. Questions regarding homework, sections or lecture material must be posted on this forum and you are encouraged to reply to questions if you know the answer or you can share a useful contribution.","tags":"pages","url":"pages/mathematical-modeling-for-computational-science/"},{"title":"Lecture 0","text":"Lecture 0","tags":"Lectures","url":"lectures/lecture0/"}]}